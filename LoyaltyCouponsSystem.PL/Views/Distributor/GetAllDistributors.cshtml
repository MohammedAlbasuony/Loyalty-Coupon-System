@model List<LoyaltyCouponsSystem.BLL.ViewModel.Distributor.DistributorViewModel>

@{
    ViewData["Title"] = "All Distributors";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-4">
    <h1 class="text-primary text-center"><b>All Distributors</b></h1>

    <!-- Search Filters and Add Button -->
    <div class="row mb-4 justify-content-center">
        <div class="col-md-8">
            <div class="input-group shadow-sm">
                <input type="text" id="searchBox" class="form-control" placeholder="Search by Code, Name, Phone Number, Governorate, City, Created By/At, Updated By/At or Status...">
                <a href="@Url.Action("AddDistributor", "Distributor")" class="btn btn-add-customer ms-2">
                    <i class="fas fa-plus"></i> Add New Distributor
                </a>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="distributorTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Phone Number</th>
                    <th>Governorate</th>
                    <th>City</th>
                    <th>Customers</th>
                    <th>Created By</th>
                    <th>Created At</th>
                    <th>Updated By</th>
                    <th>Updated At</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var distributor in Model)
                {
                    <tr id="row-@distributor.DistributorID">
                        <td>@distributor.Code</td>
                        <td>@distributor.Name</td>
                        <td>@distributor.PhoneNumber1</td>
                        <td>@distributor.SelectedGovernate</td>
                        <td>@distributor.SelectedCity</td>
                        <td>
                            @if (distributor.SelectedCustomerNames != null && distributor.SelectedCustomerNames.Any())
                            {
                                <!-- View Customers Button -->
                                <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#customersModal-@distributor.DistributorID">
                                    View Customers
                                </button>

                                <!-- Modal -->
                                <div class="modal fade" id="customersModal-@distributor.DistributorID" tabindex="-1" aria-labelledby="customersModalLabel-@distributor.DistributorID" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header bg-primary text-white">
                                                <h5 class="modal-title" id="customersModalLabel-@distributor.DistributorID">
                                                    Customers of @distributor.Name
                                                </h5>
                                                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <!-- Stylish Search Box -->
                                                <div class="input-group mb-3">
                                                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                                                    <input type="text" id="searchCustomers-@distributor.DistributorID" oninput="filterCustomers(@distributor.DistributorID)"
                                                           class="form-control" placeholder="Search Customers...">
                                                </div>
                                                <!-- Customer List -->
                                                <ul id="customerList-@distributor.DistributorID" class="list-group list-group-flush">
                                                    @foreach (var customer in distributor.SelectedCustomerNames)
                                                    {
                                                        <li class="list-group-item d-flex align-items-center">
                                                            <i class="fas fa-user-circle text-primary me-3"></i> @customer
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <span>No Customers</span>
                            }
                        </td>
                        <td>@distributor.CreatedBy</td>
                        <td>@distributor.CreatedAt</td>
                        <td>@distributor.UpdatedBy</td>
                        <td>@distributor.UpdatedAt</td>
                        <td>
                            <span class="badge @(distributor.IsActive ? "bg-success" : "bg-danger")">
                                @(distributor.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <div style="display: flex; align-items: center; gap: 10px; justify-content: center;">
                                <button class="btn btn-sm @(distributor.IsActive ? "btn-danger" : "btn-success") toggle-activation"
                                        style="padding: 8px 20px; font-size: 14px; display: inline-block; text-align: center; border-radius: 5px; width: 100px;"
                                        data-distributor-id="@distributor.DistributorID"
                                        data-is-active="@distributor.IsActive">
                                    @(distributor.IsActive ? "Deactivate" : "Activate")
                                </button>
                                <a href="@Url.Action("UpdateDistributor", "Distributor", new { id = distributor.DistributorID })"
                                   class="btn btn-outline-primary btn-sm"
                                   style="padding: 8px 20px; font-size: 14px; display: inline-block; text-align: center; border-radius: 5px; width: 100px;">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Confirmation Modal for Toggle Activation -->
    <div class="modal fade" id="toggleConfirmationModal" tabindex="-1" aria-labelledby="toggleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="toggleModalLabel">Confirm Toggle Activation</h5>
                    <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to <span id="toggleAction">activate</span> this distributor?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmToggleButton" class="btn btn-warning">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Pagination Controls -->
<div id="paginationContainer" class="mt-4 text-center"></div>


<style>
    /* Table Styling */
    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
    }

        .table th {
            text-align: center;
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            padding: 12px;
            border-bottom: 2px solid #ffffff;
            text-transform: uppercase;
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    #searchBox {
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #007bff;
        background-color: #f9f9f9;
        width: 75%;
    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        }

    .btn-add-customer {
        background-color: #007bff !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 30px !important;
        padding: 10px 20px !important;
    }

        .btn-add-customer:hover {
            background-color: #0056b3 !important;
            color: white !important;
        }

    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
    }

    .d-flex {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    #paginationContainer {
        margin-top: 20px;
    }

        #paginationContainer .btn {
            font-size: 14px !important;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            margin: 0 5px;
        }

        #paginationContainer .btn-primary {
            background-color: #007bff;
            color: white;
            border: none;
        }

        #paginationContainer .btn-outline-primary {
            border: 1px solid #007bff;
            color: #007bff;
            background-color: white;
        }

        #paginationContainer .btn:hover {
            opacity: 0.8;
        }

    /* Modal Styling */
    .modal-content {
        border-radius: 10px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        overflow: hidden;
    }

    .modal-header {
        background-color: #007bff;
        color: white;
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        text-transform: uppercase;
    }

    .modal-body .input-group {
        margin-bottom: 15px;
    }

    .input-group-text {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .form-control::placeholder {
        color: #aaa;
        font-style: italic;
    }

    .list-group-item {
        display: block; /* Ensure items are visible by default */
        border: none;
        padding: 12px 16px;
        transition: background-color 0.2s ease-in-out;
    }

        .list-group-item:hover {
            background-color: #f8f9fa;
        }

    .fas.fa-user-circle {
        font-size: 1.5rem;
        color: #007bff;
    }

    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
        transform: translateY(-50px);
        opacity: 0;
    }

    .modal.show .modal-dialog {
        transform: translateY(0);
        opacity: 1;
    }

    /* Styling for inactive rows */
    .inactive-row {
        background-color: #f5f5f5; /* Light gray background */
        color: #6c757d; /* Muted text color */
    }

        .inactive-row td {
            text-decoration: line-through; /* Strikethrough text for all columns */
        }

            /* Exclude "Actions" column from line-through */
            .inactive-row td:last-child,
            .inactive-row td:last-child * {
                text-decoration: none !important; /* Remove line-through for Actions column */
            }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>


<!-- SweetAlert2 -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



    <script>
     document.addEventListener("DOMContentLoaded", function () {
         const tableBody = document.querySelector("#distributorTable tbody");
         const rowsPerPage = 10;
         const paginationContainer = document.getElementById("paginationContainer");

         // Rearrange rows based on status
         function rearrangeRows() {
             const rows = Array.from(tableBody.querySelectorAll("tr"));
             const activeRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Active");
             const inactiveRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Inactive");

             tableBody.innerHTML = "";
             activeRows.forEach(row => tableBody.appendChild(row));
             inactiveRows.forEach(row => tableBody.appendChild(row));
         }

         // Style rows dynamically
         function styleRows() {
             const rows = Array.from(tableBody.querySelectorAll("tr"));
             rows.forEach(row => {
                 const badge = row.querySelector(".badge");
                 if (badge && badge.textContent.trim() === "Inactive") {
                     row.classList.add("inactive-row");
                 } else {
                     row.classList.remove("inactive-row");
                 }
             });
         }

         // Paginate rows
         function paginateRows(pageNumber) {
             const rows = Array.from(tableBody.querySelectorAll("tr"));
             rows.forEach((row, index) => {
                 row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
             });
             updatePagination(pageNumber, Math.ceil(rows.length / rowsPerPage));
         }

         // Update pagination controls
             function updatePagination(currentPage, totalPages) {
        paginationContainer.innerHTML = ""; // Clear previous buttons
        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.className = `btn btn-sm mx-1 ${i === currentPage ? "btn-primary" : "btn-outline-primary"}`;
            button.addEventListener("click", () => {
                paginateRows(i); // Show rows for the clicked page
            });
            paginationContainer.appendChild(button);
        }
    }


         // Search functionality
         document.getElementById("searchBox").addEventListener("input", function () {
            const searchValue = this.value.toLowerCase().trim();
            const rows = document.querySelectorAll("#distributorTable tbody tr");

            rows.forEach(row => {
                const code = row.children[0]?.textContent.toLowerCase();
                const name = row.children[1]?.textContent.toLowerCase();
                const phoneNumber = row.children[2]?.textContent.toLowerCase();
                const governorate = row.children[3]?.textContent.toLowerCase();
                const city = row.children[4]?.textContent.toLowerCase();
                const createdBy = row.children[6]?.textContent.toLowerCase();
                const createdAt = row.children[7]?.textContent.toLowerCase();
                const updatedBy = row.children[8]?.textContent.toLowerCase();
                const updatedAt = row.children[9]?.textContent.toLowerCase();
                const status = row.children[10]?.querySelector("span")?.textContent.toLowerCase().trim();

                const isStatusMatch = searchValue === "active" ? status === "active" :
                    searchValue === "inactive" ? status === "inactive" : status.includes(searchValue);

                const isOtherMatch = code.includes(searchValue) ||
                    name.includes(searchValue) ||
                    phoneNumber.includes(searchValue) ||
                    governorate.includes(searchValue) ||
                    city.includes(searchValue) ||
                    createdBy.includes(searchValue) ||
                    createdAt.includes(searchValue) ||
                    updatedBy.includes(searchValue) ||
                    updatedAt.includes(searchValue);

                row.style.display = isStatusMatch || isOtherMatch ? "" : "none";
            });

             paginateRows(1); // Reset to the first page after a search
         });

         // Toggle Activation with SweetAlert
         document.querySelectorAll(".toggle-activation").forEach(button => {
             button.addEventListener("click", function () {
                 const distributorId = this.getAttribute("data-distributor-id");
                 const isActive = this.getAttribute("data-is-active") === "True";
                 const action = isActive ? "Deactivate" : "Activate";

                 Swal.fire({
                     title: `Are you sure?`,
                     text: `You are about to ${action} this distributor.`,
                     icon: "warning",
                     showCancelButton: true,
                     confirmButtonColor: isActive ? "#d33" : "#28a745",
                     cancelButtonColor: "#6c757d",
                     confirmButtonText: `Yes, ${action}!`
                 }).then((result) => {
                     if (result.isConfirmed) {
                         fetch(`/Distributor/ToggleActivation?distributorId=${distributorId}`, {
                             method: "POST",
                             headers: {
                                 "Content-Type": "application/json"
                             },
                         })
                             .then(response => response.json())
                             .then(data => {
                                 if (data.success) {
                                     const row = document.getElementById(`row-${distributorId}`);
                                     const statusBadge = row.querySelector(".badge");
                                     const toggleButton = row.querySelector(".toggle-activation");

                                     if (data.isActive) {
                                         statusBadge.textContent = "Active";
                                         statusBadge.classList.remove("bg-danger");
                                         statusBadge.classList.add("bg-success");
                                         toggleButton.textContent = "Deactivate";
                                         toggleButton.classList.remove("btn-success");
                                         toggleButton.classList.add("btn-danger");
                                         toggleButton.setAttribute("data-is-active", "True");
                                     } else {
                                         statusBadge.textContent = "Inactive";
                                         statusBadge.classList.remove("bg-success");
                                         statusBadge.classList.add("bg-danger");
                                         toggleButton.textContent = "Activate";
                                         toggleButton.classList.remove("btn-danger");
                                         toggleButton.classList.add("btn-success");
                                         toggleButton.setAttribute("data-is-active", "False");
                                     }

                                     rearrangeRows();
                                     styleRows();
                                     paginateRows(1); // Refresh pagination

                                     Swal.fire("Success!", `Distributor has been ${action.toLowerCase()}d successfully.`, "success");
                                 } else {
                                     Swal.fire("Error!", data.message || "Failed to toggle activation.", "error");
                                 }
                             })
                             .catch(error => {
                                 Swal.fire("Error!", "An error occurred. Please try again.", "error");
                             });
                     }
                 });
             });
         });

         // Initialize rearrangement, styling, and pagination
         rearrangeRows();
         styleRows();
         paginateRows(1);
     });

     // Search in view customer pop up window
                 function filterCustomers(distributorId) {
        // Get the search input value
        const searchInput = document.getElementById(`searchCustomers-${distributorId}`).value.toLowerCase().trim();
        const customerList = document.getElementById(`customerList-${distributorId}`);

        if (!customerList) return; // Safety check

        // Get all customer list items
        const customers = customerList.querySelectorAll("li");

        // Loop through customers and filter
        customers.forEach(customer => {
            const customerName = customer.textContent.toLowerCase();
            if (customerName.includes(searchInput)) {
                customer.style.display = ""; // Show matching items
            } else {
                customer.style.display = "none"; // Hide non-matching items
            }
        });
    }


</script>

