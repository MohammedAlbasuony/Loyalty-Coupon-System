@model List<LoyaltyCouponsSystem.BLL.ViewModel.Distributor.DistributorViewModel>

@{
    ViewData["Title"] = "All Distributors";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-4">
    <h1 class="text-primary text-center"><b>All Distributors</b></h1>

    <!-- Search Filters and Add Button -->
    <div class="row mb-4 justify-content-center">
        <div class="col-md-8">
            <div class="input-group shadow-sm">
                <input type="text" id="searchBox" class="form-control" placeholder="Search by Name, Code, Governorate, City, or Phone Number...">
                <a href="@Url.Action("AddDistributor", "Distributor")" class="btn btn-add-customer ms-2">
                    <i class="fas fa-plus"></i> Add New Distributor
                </a>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="distributorTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Phone Number</th>
                    <th>Governorate</th>
                    <th>City</th>
                    <th>Customers</th>
                    <th>Created By</th>
                    <th>Created At</th>
                    <th>Updated By</th>
                    <th>Updated At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var distributor in Model)
                {
                    <tr id="row-@distributor.Code">
                        <td>@distributor.Code</td>
                        <td>@distributor.Name</td>
                        <td>@distributor.PhoneNumber1</td>
                        <td>@distributor.SelectedGovernate</td>
                        <td>@distributor.SelectedCity</td>
                        <td>
                            @if (distributor.SelectedCustomerNames != null && distributor.SelectedCustomerNames.Any())
                            {
                                <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#customersModal-@distributor.DistributorID">
                                    View Customers
                                </button>

                                <!-- Modal -->
                                <div class="modal fade" id="customersModal-@distributor.DistributorID" tabindex="-1" aria-labelledby="customersModalLabel-@distributor.DistributorID" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header bg-primary text-white">
                                                <h5 class="modal-title" id="customersModalLabel-@distributor.DistributorID">Customers of @distributor.Name</h5>
                                                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <!-- Search Box for Filtering Customers -->
                                                <div class="mb-3">
                                                    <input type="text" class="form-control" id="searchCustomers-@distributor.DistributorID" placeholder="Search Customers..." oninput="filterCustomers(@distributor.DistributorID)">
                                                </div>
                                                <!-- Customer List -->
                                                <ul id="customerList-@distributor.DistributorID" class="list-group">
                                                    @foreach (var customer in distributor.SelectedCustomerNames)
                                                    {
                                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                                            <span>@customer</span>
                                                            <button class="btn btn-outline-danger btn-sm" onclick="confirmDeleteCustomer('@customer', @distributor.DistributorID)">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <span>No Customers</span>
                            }
                        </td>

                        <td>@distributor.CreatedBy</td>
                        <td>@distributor.CreatedAt</td>
                        <td>@distributor.UpdatedBy</td>
                        <td>@distributor.UpdatedAt</td>
                        <td>
                            <a href="@Url.Action("UpdateDistributor", "Distributor", new { id = distributor.DistributorID })" class="btn btn-outline-primary btn-sm me-2">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <button class="btn btn-outline-danger btn-sm" onclick="confirmDelete('@distributor.DistributorID')">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>

<!-- Delete Customer Confirmation Modal -->
<div class="modal fade" id="deleteCustomerModal" tabindex="-1" aria-labelledby="deleteCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCustomerModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span id="customerToDelete"></span>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteCustomerButton">Delete</button>
            </div>
        </div>
    </div>
</div>


<style>
    /* Table Styling */
    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
    }

        .table th {
            text-align: center;
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            padding: 12px;
            border-bottom: 2px solid #ffffff;
            text-transform: uppercase;
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    #searchBox {
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #007bff;
        background-color: #f9f9f9;
        width: 75%; /* Adjust width as needed */
    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        }

    .btn-add-customer {
        background-color: #007bff !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 30px !important;
        padding: 10px 20px !important;
    }

        .btn-add-customer:hover {
            background-color: #0056b3 !important;
            color: white!important ;
        }

    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
    }

    .d-flex {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
    }

    #paginationContainer .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #paginationContainer .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        background-color: white;
    }

    #paginationContainer .btn:hover {
        opacity: 0.8;
    }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    }

    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
        transform: translateY(-50px);
        opacity: 0;
    }

    .modal.show .modal-dialog {
        transform: translateY(0);
        opacity: 1;
    }

    .modal-header {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        text-transform: uppercase;
    }

</style>

<script>
    let deleteDistributorId = null;
    let deleteCustomerName = null;
    let deleteCustomerDistributorId = null;

    // Confirmation Modal for Distributor
    function confirmDelete(distributorCode) {
        deleteDistributorId = distributorCode;
        const deleteModal = new bootstrap.Modal(document.getElementById("deleteConfirmationModal"));
        deleteModal.show();
    }

    // AJAX Delete Functionality for Distributor
    function deleteDistributor() {
        if (deleteDistributorId) {
            fetch(`/Distributor/DeleteDistributor/${deleteDistributorId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    const row = document.getElementById(`row-${deleteDistributorId}`);
                    if (row) row.remove();
                } else {
                    alert("Failed to delete distributor.");
                }
            })
            .catch(error => console.error('Error deleting distributor:', error));
        }
        const deleteModal = bootstrap.Modal.getInstance(document.getElementById("deleteConfirmationModal"));
        deleteModal.hide();
    }

    // Confirmation Modal for Customer Deletion
    function confirmDeleteCustomer(customerName, distributorID) {
        deleteCustomerName = customerName;
        deleteCustomerDistributorId = distributorID;

        const customerNameElement = document.getElementById("customerToDelete");
        customerNameElement.textContent = customerName;

        const deleteCustomerModal = new bootstrap.Modal(document.getElementById("deleteCustomerModal"));
        deleteCustomerModal.show();
    }

    // AJAX Delete Functionality for Customer
    document.getElementById("confirmDeleteCustomerButton").addEventListener("click", function () {
        if (deleteCustomerName && deleteCustomerDistributorId) {
            fetch(`/Customer/DeleteCustomer?name=${deleteCustomerName}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    const customerList = document.getElementById(`customerList-${deleteCustomerDistributorId}`);
                    const customerItems = customerList.getElementsByTagName("li");

                    Array.from(customerItems).forEach((customer) => {
                        if (customer.textContent.trim() === deleteCustomerName) {
                            customer.remove();
                        }
                    });

                    alert("Customer deleted successfully.");
                } else {
                    alert("Failed to delete customer.");
                }
            })
            .catch(error => console.error('Error deleting customer:', error));
        }
        const deleteCustomerModal = bootstrap.Modal.getInstance(document.getElementById("deleteCustomerModal"));
        deleteCustomerModal.hide();
    });

    // Search Functionality for Distributors
    document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#distributorTable tbody tr");

        rows.forEach(row => {
            const cells = Array.from(row.children);
            const isVisible = cells.some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none";
        });
    });

    // Filter Customers in Modal
    function filterCustomers(distributorID) {
        const searchInput = document.getElementById(`searchCustomers-${distributorID}`).value.toLowerCase();
        const customerList = document.getElementById(`customerList-${distributorID}`);
        const customers = customerList.getElementsByTagName("li");

        Array.from(customers).forEach((customer) => {
            const customerName = customer.textContent.toLowerCase();
            if (customerName.includes(searchInput)) {
                customer.style.display = "";
            } else {
                customer.style.display = "none";
            }
        });
    }

    // Pagination functionality
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; // Number of rows per page
        const tableBody = document.querySelector("#distributorTable tbody");
        const paginationContainer = document.getElementById("paginationContainer");

        // Function to show a specific page
        function showPage(pageNumber) {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            // Hide all rows and show only the rows for the current page
            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });

            // Update pagination controls
            updatePaginationControls(pageNumber, totalPages);
        }

        // Function to update pagination controls
        function updatePaginationControls(currentPage, totalPages) {
            paginationContainer.innerHTML = ""; // Clear existing pagination controls

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                button.classList.add("btn", "btn-sm", "mx-1");
                button.classList.add(i === currentPage ? "btn-primary" : "btn-outline-primary");
                button.addEventListener("click", () => showPage(i));
                paginationContainer.appendChild(button);
            }
        }

        // Initialize pagination
        showPage(1);
    });
</script>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
