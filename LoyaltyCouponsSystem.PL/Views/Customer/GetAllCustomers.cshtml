@using LoyaltyCouponsSystem.BLL.ViewModel.Customer
@model List<CustomerViewModel>

@{
    ViewData["Title"] = "All Customers";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";

}


<div class="container mt-4">
    <!-- Backward Button -->
    <div class="mb-3">
        <a href="@Url.Action("Index", "Customer")" class="btn btn-custom-backward">
            <i class="fas fa-arrow-left"></i> Back
        </a>
    </div>

    <b><h1 class="text-primary text-center">All Customers</h1></b>


        <!-- Search Filters -->
        <div class="row mb-4 justify-content-center">
            <div class="col-md-8">
                <div class="input-group shadow-sm">
                    <input type="text" id="searchBox" class="form-control" placeholder="Search by Name, Code, Governorate, City, or Phone Number...">
                </div>
            </div>
        </div>

        <!-- Table -->
        <div class="table-responsive">
            <table id="customerTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
                <thead class="thead-dark bg-primary text-white">
                    <tr>
                        <th>Name</th>
                        <th>Customer Code</th>
                        <th>Governorate</th>
                        <th>City</th>
                        <th>Phone Number</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in Model)
                    {
                        <tr id="row-@customer.Code">
                            <td>@customer.Name</td>
                            <td>@customer.Code</td>
                            <td>@customer.Governate</td>
                            <td>@customer.City</td>
                            <td>@customer.PhoneNumber</td>
                            <td>
                                <a href="@Url.Action("UpdateCustomer", "Customer", new { id = customer.Code })" class="btn btn-outline-primary btn-sm me-2">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button class="btn btn-outline-danger btn-sm" onclick="confirmDelete('@customer.Code')">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this customer?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteButton" class="btn btn-danger" onclick="deleteCustomer()">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>

    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center; /* Center table data */
    }

    .table th {
        text-align: center;
        background-color: #007bff !important; /* Blue background */
        color: #ffffff !important; /* White text for better visibility */
        font-weight: bold; /* Make the text bold */
        padding: 12px; /* Add padding for proper spacing */
        border-bottom: 2px solid #ffffff; /* Optional: Add a white bottom border */
        text-transform: uppercase; /* Make header text uppercase for styling */
    }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff; /* Light blue hover effect for table rows */
    }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    #searchBox {
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
        width: 100%;
        border: 2px solid #007bff; /* Add border to search box */
        background-color: #f9f9f9; /* Light background */
        padding-left: 35px; /* Adjust padding for icon spacing */
        position: relative;
    }

    #searchBox::placeholder {
        font-style: italic; /* Add placeholder styling */
        color: #aaa;
    }

    #searchBox:before {
        content: '\f002'; /* Font Awesome search icon */
        font-family: 'FontAwesome';
        position: absolute;
        left: 10px; /* Adjust icon position */
        color: #007bff;
        font-size: 18px;
    }

    h1 {
        font-weight: bold;
        letter-spacing: 1px;
    }

    .btn-custom-backward {
        font-size: 14px;
        padding: 8px 20px;
        font-weight: bold;
        display: inline-flex;
        align-items: center;
        border: 2px solid #007bff;
        color: #007bff;
        border-radius: 30px;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .btn-custom-backward i {
            margin-right: 5px;
        }

        .btn-custom-backward:hover {
            background-color: #007bff;
            color: #fff;
            text-decoration: none;

</style>


<script>
    let deleteCustomerId = null;

    // Confirmation Modal
    function confirmDelete(customerCode) {
        deleteCustomerId = customerCode;
        const deleteModal = new bootstrap.Modal(document.getElementById("deleteConfirmationModal"));
        deleteModal.show();
    }

    // AJAX Delete Functionality
    function deleteCustomer() {
        if (deleteCustomerId) {
            fetch(`/Customer/DeleteCustomer/${deleteCustomerId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    // Remove row from the table
                    const row = document.getElementById(`row-${deleteCustomerId}`);
                    if (row) row.remove();
                } else {
                    alert("Failed to delete customer.");
                }
            })
            .catch(error => console.error('Error deleting customer:', error));
        }
        const deleteModal = bootstrap.Modal.getInstance(document.getElementById("deleteConfirmationModal"));
        deleteModal.hide();
    }

    // Search Functionality
    document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#customerTable tbody tr");

        rows.forEach(row => {
            const cells = Array.from(row.children);
            const isVisible = cells.some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none";
        });
    });
</script>
