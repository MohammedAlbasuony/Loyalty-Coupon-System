@using LoyaltyCouponsSystem.BLL.ViewModel.Customer
@model List<CustomerViewModel>

@{
    ViewData["Title"] = "All Customers";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-4">
    <h1 class="text-primary text-center"><b>All Customers</b></h1>

    <!-- Search Filters and Add Button -->
    <div class="row mb-4 justify-content-center">
        <div class="col-md-8">
            <div class="input-group shadow-sm">
                <input type="text" id="searchBox" class="form-control" placeholder="Search by Name, Code, Governorate, City, or Phone Number...">
                <a href="@Url.Action("AddCustomer", "Customer")" class="btn btn-add-customer ms-2">
                    <i class="fas fa-plus"></i> Add New Customer
                </a>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="customerTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Name</th>
                    <th>Customer Code</th>
                    <th>Governorate</th>
                    <th>City</th>
                    <th>Phone Number</th>
                    <th>Created By</th>
                    <th>Created At</th>
                    <th>Updated By</th>
                    <th>Updated At</th>
                    <th>Current Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in Model)
                {
                    <tr id="row-@customer.Code">
                        <td>@customer.Name</td>
                        <td>@customer.Code</td>
                        <td>@customer.Governate</td>
                        <td>@customer.City</td>
                        <td>@customer.PhoneNumber</td>
                        <td>@customer.CreatedBy</td>
                        <td>@customer.CreatedAt</td>
                        <td>@customer.UpdatedBy</td>
                        <td>@customer.UpdatedAt</td>
                        <td>
                            <span class="badge @(customer.IsActive ? "bg-success" : "bg-danger")">
                                @(customer.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <button class="btn toggle-btn btn-sm shadow @(customer.IsActive ? "btn-danger" : "btn-success")"
                                    onclick="toggleActivation('@customer.CustomerID', this, @(customer.IsActive))">
                                @(customer.IsActive ? "Deactivate" : "Activate")
                            </button>
                            <a href="@Url.Action("UpdateCustomer", "Customer", new { id = customer.CustomerID })" class="btn btn-outline-primary btn-sm me-2">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this customer?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteButton" class="btn btn-danger" onclick="deleteCustomer()">Delete</button>
            </div>
        </div>
    </div>
</div>


<style>
    /* Table Styling */
    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
    }

        .table th {
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            font-size: 16px;
            padding: 12px;
            text-transform: uppercase;
        }

        .table td {
            font-size: 14px;
            font-weight: 500;
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .badge {
        padding: 5px 10px;
        font-size: 14px;
        font-weight: bold;
        border-radius: 6px;
    }

    .btn-add-customer {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border-radius: 30px;
        padding: 10px 20px;
    }

        .btn-add-customer:hover {
            background-color: #0056b3;
            color:white;
        }

    .toggle-btn {
        font-size: 14px;
        font-weight: bold;
        border-radius: 6px;
    }

        .toggle-btn.btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .toggle-btn.btn-success {
            background-color: #28a745;
            color: white;
        }

        .toggle-btn:hover {
            opacity: 0.8;
        }

        .btn-add-customer i {
            margin-right: 8px;
        }

    /* Search Box Styling */
    #searchBox {
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #007bff;
        background-color: #f9f9f9;
        width: 75%; /* Adjust width as needed */
    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        }

    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
    }

    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
    }

    #paginationContainer .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #paginationContainer .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        background-color: white;
    }

    #paginationContainer .btn:hover {
        opacity: 0.8;
    }


</style>

<script>
    let deleteCustomerId = null;

    // Confirmation Modal
    function confirmDelete(customerCode) {
        deleteCustomerId = customerCode;
        const deleteModal = new bootstrap.Modal(document.getElementById("deleteConfirmationModal"));
        deleteModal.show();
    }

    // AJAX Delete Functionality
    function deleteCustomer() {
        if (deleteCustomerId) {
            fetch(`/Customer/DeleteCustomer/${deleteCustomerId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    // Remove row from the table
                    const row = document.getElementById(`row-${deleteCustomerId}`);
                    if (row) row.remove();
                } else {
                    alert("Failed to delete customer.");
                }
            })
            .catch(error => console.error('Error deleting customer:', error));
        }
        const deleteModal = bootstrap.Modal.getInstance(document.getElementById("deleteConfirmationModal"));
        deleteModal.hide();
    }

    // Search Functionality
    document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#customerTable tbody tr");

        rows.forEach(row => {
            const cells = Array.from(row.children);
            const isVisible = cells.some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none";
        });
    });

    // Activate/Deactivate Toggle button
                function toggleActivation(customerCode, button) {
        fetch(`/Customer/ToggleActivation?customerCode=${customerCode}`, {
            method: "POST"
        })
        .then(response => {
            if (response.ok) {
                // Update the UI dynamically
                const row = button.closest("tr");
                const badge = row.querySelector(".badge");
                const isActive = badge.innerText === "Active";

                if (isActive) {
                    badge.classList.remove("bg-success");
                    badge.classList.add("bg-danger");
                    badge.innerText = "Inactive";

                    button.classList.remove("btn-danger");
                    button.classList.add("btn-success");
                    button.innerText = "Activate";
                } else {
                    badge.classList.remove("bg-danger");
                    badge.classList.add("bg-success");
                    badge.innerText = "Active";

                    button.classList.remove("btn-success");
                    button.classList.add("btn-danger");
                    button.innerText = "Deactivate";
                }
            } else {
                alert("Failed to update customer status.");
            }
        })
        .catch(error => console.error("Error:", error));
    }


    // Pagination functionality
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; // Set to 10 rows per page
        const tableBody = document.querySelector("#customerTable tbody");
        const paginationContainer = document.getElementById("paginationContainer");

        // Function to show a specific page
        function showPage(pageNumber) {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            // Hide all rows and show only the rows for the current page
            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });

            // Update pagination controls
            updatePaginationControls(pageNumber, totalPages);
        }

        // Function to update pagination controls
        function updatePaginationControls(currentPage, totalPages) {
            paginationContainer.innerHTML = ""; // Clear existing pagination controls

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                button.classList.add("btn", "btn-sm", "mx-1");
                button.classList.add(i === currentPage ? "btn-primary" : "btn-outline-primary");
                button.addEventListener("click", () => showPage(i));
                paginationContainer.appendChild(button);
            }
        }

        // Initialize pagination
        showPage(1);
    });

</script>
