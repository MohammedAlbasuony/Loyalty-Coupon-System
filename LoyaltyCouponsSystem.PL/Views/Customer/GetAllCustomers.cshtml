@using LoyaltyCouponsSystem.BLL.ViewModel.Customer
@model List<CustomerViewModel>

@{
    ViewData["Title"] = "All Customers";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-4">
    <h1 class="text-primary text-center"><b>All Customers</b></h1>

    <!-- Search Filters and Add Button -->
    <div class="row mb-4 justify-content-center">
        <div class="col-md-8">
            <div class="input-group shadow-sm">
                <input type="text" id="searchBox" class="form-control" placeholder="Search by Name, Code, Governorate, City, or Phone Number...">
                <a href="@Url.Action("AddCustomer", "Customer")" class="btn btn-add-customer ms-2">
                    <i class="fas fa-plus"></i> Add New Customer
                </a>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="customerTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Governorate</th>
                    <th>City</th>
                    <th>Phone Number</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in Model)
                {
                    <tr id="row-@customer.CustomerID">
                        <td>@customer.Code</td>
                        <td>@customer.Name</td>
                        <td>@customer.Governate</td>
                        <td>@customer.City</td>
                        <td>@customer.PhoneNumber</td>
                        <td>
                            <span class="badge @(customer.IsActive ? "bg-success" : "bg-danger")">
                                @(customer.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm @(customer.IsActive ? "btn-danger" : "btn-success") toggle-activation"
                                    data-customer-id="@customer.CustomerID"
                                    data-is-active="@customer.IsActive">
                                @(customer.IsActive ? "Deactivate" : "Activate")
                            </button>
                            <a href="@Url.Action("UpdateCustomer", "Customer", new { id = customer.CustomerID })" class="btn btn-outline-primary btn-sm me-2">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>

    <!-- Confirmation Modal for Toggle Activation (moved outside the loop) -->
    <div class="modal fade" id="toggleConfirmationModal" tabindex="-1" aria-labelledby="toggleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="toggleModalLabel">Confirm Toggle Activation</h5>
                    <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to <span id="toggleAction">activate</span> this customer?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmToggleButton" class="btn btn-warning">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination Controls -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>

<style>
    /* Table Styling */
    .table th {
        background-color: #007bff !important;
        color: #ffffff !important;
        font-weight: bold;
        text-transform: uppercase;
    }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .btn-add-customer {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border-radius: 30px;
    }

    .badge.bg-success {
        background-color: #28a745;
    }

    .badge.bg-danger {
        background-color: #dc3545;
    }
</style>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS (includes Popper.js for modal handling) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
        document.addEventListener("DOMContentLoaded", function () {
        const tableBody = document.querySelector("#customerTable tbody");

        function rearrangeRows() {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const activeRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Active");
            const inactiveRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Inactive");

            // Clear and re-add rows
            tableBody.innerHTML = "";
            activeRows.forEach(row => tableBody.appendChild(row));
            inactiveRows.forEach(row => tableBody.appendChild(row));
        }

        // Rearrange rows on page load
        rearrangeRows();

        // Toggle activation and rearrange rows dynamically
        document.querySelectorAll(".toggle-activation").forEach(button => {
            button.addEventListener("click", function () {
                const customerId = this.getAttribute("data-customer-id");
                const isActive = this.getAttribute("data-is-active") === "True";

                // Call API to toggle activation
                fetch(`/Customer/ToggleActivation?customerId=${customerId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const row = document.getElementById(`row-${customerId}`);
                            const statusBadge = row.querySelector(".badge");
                            const toggleButton = row.querySelector(".toggle-activation");

                            // Update status and button dynamically
                            if (data.isActive) {
                                statusBadge.textContent = "Active";
                                statusBadge.classList.remove("bg-danger");
                                statusBadge.classList.add("bg-success");
                                toggleButton.textContent = "Deactivate";
                                toggleButton.classList.remove("btn-success");
                                toggleButton.classList.add("btn-danger");
                            } else {
                                statusBadge.textContent = "Inactive";
                                statusBadge.classList.remove("bg-success");
                                statusBadge.classList.add("bg-danger");
                                toggleButton.textContent = "Activate";
                                toggleButton.classList.remove("btn-danger");
                                toggleButton.classList.add("btn-success");
                            }

                            toggleButton.setAttribute("data-is-active", data.isActive.toString());

                            // Rearrange rows after the change
                            rearrangeRows();
                        } else {
                            alert(data.message || "Failed to toggle activation.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while toggling activation. Please try again.");
                    });
            });
        });
    });


    // Search functionality
    document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase();
        document.querySelectorAll("#customerTable tbody tr").forEach(row => {
            const isVisible = Array.from(row.cells).some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none";
        });
    });

    // Pagination functionality
    const rowsPerPage = 10;
    const tableBody = document.querySelector("#customerTable tbody");
    const paginationContainer = document.getElementById("paginationContainer");

    function showPage(pageNumber) {
        const rows = Array.from(tableBody.querySelectorAll("tr"));
        rows.forEach((row, index) => {
            row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
        });
        updatePagination(pageNumber, Math.ceil(rows.length / rowsPerPage));
    }

    function updatePagination(currentPage, totalPages) {
        paginationContainer.innerHTML = "";
        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.className = `btn btn-sm mx-1 ${i === currentPage ? "btn-primary" : "btn-outline-primary"}`;
            button.addEventListener("click", () => showPage(i));
            paginationContainer.appendChild(button);
        }
    }

    showPage(1);
</script>
