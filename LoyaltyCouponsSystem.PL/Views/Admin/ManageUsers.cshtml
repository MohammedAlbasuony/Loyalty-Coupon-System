@model LoyaltyCouponsSystem.BLL.ViewModel.Admin.ManageUsersViewModel

@{
    ViewData["Title"] = "Manage Users";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

@*<h1>Manage Users</h1>*@

@if (User.IsInRole("SuperAdmin"))
{
    <div class="container mt-4">
        <h1 class="text-primary text-center"><b>Manage Users</b></h1>
        <br />
        <!-- Search Filters and Add Button -->
        <div class="row mb-4 justify-content-center">
            <div class="col-md-8">
                <div class="input-group shadow-sm">
                    <input type="text" id="searchBox" class="form-control" placeholder="Search by Name, Code, Governorate, City, or Phone Number...">
                    <a href="@Url.Action("AddUser", "User")" class="btn btn-add-customer input-group-text">
                        <i class="fas fa-plus"></i> Add User
                    </a>
                </div>
            </div>
        </div>

        <div class="table-responsive mt-4">
            <table id="usersTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
                <thead class="thead-dark bg-primary text-white">
                    <tr>
                        <th>Username</th>
                        <th>National ID</th>
                        <th>Phone Number</th>
                        <th>Optional Phone</th>
                        <th>Governorate</th>
                        <th>City</th>
                        <th>Current Role</th>
                        <th>Current Status</th>
                        <th>Assign Role</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.ConfirmedUsers)
                    {
                        if (user.Role.Equals("SuperAdmin", StringComparison.OrdinalIgnoreCase))
                        {
                            continue; // Skip the row entirely
                        }
                        <tr class="@(user.IsActive ? "" : "inactive")">
                            <td>@user.UserName</td>
                            <td>@user.NationalID</td>
                            <td>@user.PhoneNumber</td>
                            <td>@(string.IsNullOrEmpty(user.OptionalPhoneNumber) ? "N/A" : user.OptionalPhoneNumber)</td>
                            <td>@user.Governorate</td>
                            <td>@user.City</td>
                            <td>@user.Role</td>
                            <td>
                                <span class="badge @(user.IsActive ? "bg-success" : "bg-danger")">
                                    @(user.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                @if (user.IsActive)
                                {
                                    <form asp-action="AssignRole" asp-controller="Admin" method="post" class="action-form">
                                        <input type="hidden" name="userId" value="@user.Id" />
                                        <select name="roleName" class="form-select action-dropdown">
                                            <option disabled selected>Select Role</option>
                                            @foreach (var role in Model.AllRoles)
                                            {
                                                <option value="@role">@role</option>
                                            }
                                        </select>
                                        <br />
                                        <button type="button" class="btn btn-primary btn-sm shadow assign-btn" onclick="confirmAssignRole('@user.UserName', this.form)">
                                            Assign Role
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <span class="text-muted">Not Available</span>
                                }
                            </td>
                            <td>
                                <form asp-action="ToggleActivation" asp-controller="Admin" method="post" class="action-form">
                                    <input type="hidden" name="userId" value="@user.Id" />
                                    <button type="button"
                                            class="btn btn-sm toggle-btn shadow @(user.IsActive ? "deactivate" : "activate")"
                                            onclick="toggleActivation(this, '@user.UserName', this.form)"
                                            data-status="@user.IsActive">
                                        @(user.IsActive ? "Deactivate" : "Activate")
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }

                    @foreach (var user in Model.UnconfirmedUsers)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.NationalID</td>
                            <td>@user.PhoneNumber</td>
                            <td>@(string.IsNullOrEmpty(user.OptionalPhoneNumber) ? "N/A" : user.OptionalPhoneNumber)</td>
                            <td>@user.Governorate</td>
                            <td>@user.City</td>
                            <td>@user.Role</td>
                            <td><span class="badge bg-warning text-white">Pending</span></td>
                            <td>
                                <form asp-action="AssignRole" asp-controller="Admin" method="post" class="action-form">
                                    <input type="hidden" name="userId" value="@user.Id" />
                                    <select name="roleName" class="form-select action-dropdown">
                                        <option disabled selected>Select Role</option>
                                        @foreach (var role in Model.AllRoles)
                                        {
                                            <option value="@role">@role</option>
                                        }
                                    </select>
                                    <br />
                                    <button type="button" class="btn btn-primary btn-sm shadow assign-btn" onclick="confirmAssignRole('@user.UserName', this.form)">
                                        Assign Role
                                    </button>
                                </form>
                            </td>
                            <td>
                                <form asp-action="ConfirmAccount" asp-controller="Admin" method="post" class="action-form">
                                    <input type="hidden" name="userId" value="@user.Id" />
                                    <button type="button" class="btn btn-warning btn-sm shadow confirm-btn" onclick="confirmAccount('@user.UserName', this.form)">
                                        Confirm Account
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div id="paginationContainer" class="mt-4 text-center"></div>
    </div>
}



    <!-- Confirmation Modals -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content shadow">
                <div class="modal-header bg-gradient-primary text-white">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center" id="confirmationModalBody">
                    <!-- Content updated dynamically via JavaScript -->
                </div>
                <div class="modal-footer justify-content-start">
                    <button type="button" class="btn btn-danger btn-lg px-4 py-2" id="confirmActionButton">
                        <i class="fas fa-check-circle"></i> Confirm
                    </button>
                    <button type="button" class="btn btn-secondary btn-lg px-4 py-2 ms-2" data-bs-dismiss="modal">
                        <i class="fas fa-times-circle"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

@* } *@
@* else *@
@* { *@
@*     <div class="alert alert-danger" role="alert"> *@
@*         You do not have permission to view this page. *@
@*     </div> *@
@* } *@


<style>
    .container {
        max-width: 95%; /* Adjust container width to fit larger table */
        margin: 0 auto; /* Center the container */
    }

    .table-responsive {
        overflow-x: unset; /* Remove horizontal scrolling */
        padding: 0;
        margin-left: auto; /* Move the table 2px to the left */
        margin-right: auto; /* Ensure it's still centered within the layout */
    }

    .btn-add-customer {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border-radius: 0 30px 30px 0; /* Rounded right corners */
        padding: 8px 16px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    


        .btn-add-customer:hover {
            background-color: #0056b3;
            color: white;
        }
    .table {
        width: 100%; /* Full width table */
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
        table-layout: auto; /* Allow table to auto-adjust column widths */
    }

        .table th,
        .table td {
            word-wrap: break-word; /* Wrap content within cells */
            white-space: normal; /* Allow text wrapping */
            text-align: center;
            vertical-align: middle;
            padding: 15px; /* Increased padding for better spacing */
            font-weight: 600; /* Bold text for better readability */
            font-size: 14px; /* Larger font size for data */
        }

        .table th {
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 16px; /* Larger font size for headers */
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .inactive-row {
        background-color: #f0f0f0 !important; /* Light gray background */
        color: #6c757d; /* Dimmed text color */
    }

        .inactive-row td {
            text-decoration: line-through; /* Add strikethrough to text */
        }

    .active-row {
        background-color: inherit; /* Reset to default background */
        color: inherit; /* Reset to default text color */
    }

        .active-row td {
            text-decoration: none; /* Remove strikethrough */
        }

    h1 {
        font-size: 32px; /* Larger header size */
        font-weight: bold;
    }

    .btn-danger {
        background-color: #ff4d4d;
        border: none;
        border-radius: 30px;
        font-size: 14px;
        font-weight: bold;
        color: white;
        transition: background 0.3s ease;
    }

        .btn-danger:hover {
            background-color: #cc0000;
        }

    .assign-btn,
    .confirm-btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px; /* Adjust button size */
        font-size: 14px; /* Larger font size */
        font-weight: bold;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

        .assign-btn:hover,
        .confirm-btn:hover {
            background-color: #0056b3;
            color: white !important;
        }

    .toggle-btn {
        padding: 10px 15px; /* Adjust button size */
        font-size: 14px; /* Larger font size */
        font-weight: bold;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

        .toggle-btn.deactivate {
            background-color: #dc3545;
            color: white;
        }

            .toggle-btn.deactivate:hover {
                background-color: #b02a37;
            }

        .toggle-btn.activate {
            background-color: #28a745;
            color: white;
        }

            .toggle-btn.activate:hover {
                background-color: #218838;
            }

    .action-dropdown {
        border-radius: 6px;
        padding: 10px 15px; /* Adjust dropdown size */
        font-size: 14px; /* Larger font size */
        border: 1px solid #ddd;
        background-color: #fff;
        width: 120px;
        transition: border-color 0.3s ease;
    }

    .badge {
        padding: 5px 10px; /* Adjust badge size */
        border-radius: 6px;
        font-size: 14px; /* Larger font size */
        font-weight: bold;
    }

     #searchBox {
border-radius: 30px 0 0 30px; /* Rounded left corn        padding: 8px;
        font-size: 14px;
        width: 100%;
        border: 2px solid #007bff;
        background-color: #f9f9f9;

    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        } 

    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
    }

    #paginationContainer .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #paginationContainer .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        background-color: white;
    }

    #paginationContainer .btn:hover {
        opacity: 0.8;
    }


</style>


<!-- SweetAlert2 -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
    let currentForm = null;

    // Confirm Assign Role Functionality
    function confirmAssignRole(userName, form) {
        currentForm = form; // Set the form to be submitted later
        const selectedRole = form.querySelector("select[name='roleName']").value; // Get the selected role

        // Validate the role selection
        if (!selectedRole || selectedRole === "Select Role") {
            Swal.fire("Warning!", "Please select a role before assigning.", "warning");
            return;
        }

        // Display confirmation modal with SweetAlert2
        Swal.fire({
            title: "Are you sure?",
            text: `You are about to assign the role "${selectedRole}" to ${userName}.`,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#007bff",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Yes, Assign!",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                currentForm.submit(); // Submit the form if the user confirms
            }
        });
    }

    // Attach event listeners to Assign Role buttons
    document.querySelectorAll(".assign-btn").forEach(button => {
        button.addEventListener("click", function () {
            const form = this.closest("form"); // Get the form element
            const userName = this.closest("tr").querySelector("td").textContent.trim(); // Get the username
            confirmAssignRole(userName, form); // Call the function
        });
    });

        // Confirm Account for Unconfirmed Users
    document.querySelectorAll(".confirm-btn").forEach(button => {
        button.addEventListener("click", function () {
            const form = this.closest("form"); // Get the form element
            const userName = this.closest("tr").querySelector("td").textContent.trim(); // Get the username

            Swal.fire({
                title: "Are you sure?",
                text: `You are about to confirm the account for ${userName}.`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#007bff",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Yes, Confirm!",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit(); // Submit the form if the user confirms
                }
            });
        });
    });

        // Toggle Activation
        document.querySelectorAll(".toggle-btn").forEach(button => {
            button.addEventListener("click", function () {
                const userName = this.closest("tr").querySelector("td").textContent.trim();
                const form = this.closest("form");
                const isActive = this.getAttribute("data-status") === "True";
                const action = isActive ? "Deactivate" : "Activate";

                Swal.fire({
                    title: "Are you sure?",
                    text: `You are about to ${action} the account for ${userName}.`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: isActive ? "#d33" : "#28a745",
                    cancelButtonColor: "#6c757d",
                    confirmButtonText: `Yes, ${action}!`,
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); // Submit the form after confirmation
                    }
                });
            });
        });

        // Rearrange Rows
        function rearrangeRows() {
            const tableBody = document.querySelector("#usersTable tbody");
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const activeRows = rows.filter(row => row.querySelector(".badge")?.textContent.trim() === "Active");
            const unconfirmedRows = rows.filter(row => row.querySelector(".badge")?.textContent.trim() === "Pending");
            const inactiveRows = rows.filter(row => row.querySelector(".badge")?.textContent.trim() === "Inactive");

            tableBody.innerHTML = ""; // Clear the table
            activeRows.forEach(row => tableBody.appendChild(row)); // Add active rows
            unconfirmedRows.forEach(row => tableBody.appendChild(row)); // Add unconfirmed rows
            inactiveRows.forEach(row => tableBody.appendChild(row)); // Add inactive rows
        }

        // Style Rows
        function styleRows() {
            const rows = Array.from(document.querySelectorAll("#usersTable tbody tr"));
            rows.forEach(row => {
                const badge = row.querySelector(".badge");
                if (badge) {
                    if (badge.textContent.trim() === "Inactive") {
                        row.classList.add("inactive-row");
                    } else if (badge.textContent.trim() === "Pending") {
                        row.classList.add("pending-row");
                    } else {
                        row.classList.remove("inactive-row");
                        row.classList.remove("pending-row");
                    }
                }
            });
        }

        // Rearrange and style rows on page load
        rearrangeRows();
        styleRows();

        // Pagination
        const rowsPerPage = 10;
        const paginationContainer = document.getElementById("paginationContainer");

        function showPage(pageNumber) {
            const rows = Array.from(document.querySelector("#usersTable tbody").querySelectorAll("tr"));
            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });
            updatePagination(pageNumber, Math.ceil(rows.length / rowsPerPage));
        }

        function updatePagination(currentPage, totalPages) {
            paginationContainer.innerHTML = "";
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                button.classList.add("btn", "btn-sm", "mx-1");
                button.classList.add(i === currentPage ? "btn-primary" : "btn-outline-primary");
                button.addEventListener("click", () => showPage(i));
                paginationContainer.appendChild(button);
            }
        }

        // Initialize pagination
        showPage(1);

        // Search Functionality
        document.getElementById("searchBox").addEventListener("input", function () {
            const searchValue = this.value.toLowerCase().trim();
            const rows = document.querySelectorAll("#usersTable tbody tr");

            rows.forEach(row => {
                const username = row.children[0]?.textContent.toLowerCase();
                const nationalId = row.children[1]?.textContent.toLowerCase();
                const phoneNumber = row.children[2]?.textContent.toLowerCase();
                const optionalPhone = row.children[3]?.textContent.toLowerCase();
                const governorate = row.children[4]?.textContent.toLowerCase();
                const city = row.children[5]?.textContent.toLowerCase();
                const role = row.children[6]?.textContent.toLowerCase();
                const status = row.children[7]?.textContent.toLowerCase().trim();

                const isMatch =
                    username.includes(searchValue) ||
                    nationalId.includes(searchValue) ||
                    phoneNumber.includes(searchValue) ||
                    optionalPhone.includes(searchValue) ||
                    governorate.includes(searchValue) ||
                    city.includes(searchValue) ||
                    role.includes(searchValue) ||
                    status.includes(searchValue);

                row.style.display = isMatch ? "" : "none";
            });
        });
    });
</script>


