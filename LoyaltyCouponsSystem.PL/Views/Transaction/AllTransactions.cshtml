@model List<LoyaltyCouponsSystem.DAL.Entity.Transaction>
@{
    ViewData["Title"] = "All Transactions";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-5">
    <!-- Header Section -->
    <div class="text-center mb-4">
        <h1 class="display-5 text-primary"><b>All Transactions</b></h1>
        <p class="lead text-secondary">View all transaction records with detailed information.</p>
    </div>

    <!-- Search Box -->
    <div class="row mb-3">
        <div class="col-md-12">
            <input type="text" id="searchBox" class="form-control" placeholder="Search by Exchange Permission, Customer Name, Technician Name, Governorate, City, Created By or Created At..." />
        </div>
    </div>

    <!-- Table Section -->
    <div class="table-responsive">
        <table id="transactionsTable" class="table table-hover shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Exchange Permission</th>
                    <th>Customer Name</th>
                    <th>Distributor Name</th>
                    <th>Governorate</th>
                    <th>City</th>
                    <th>Created By</th>
                    <th>Created At</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in Model)
                {
                    <tr>
                        <td>@transaction.ExchangePermission</td>
                        <td>@transaction.Customer.Name</td>
                        <td>@transaction.Distributor.Name</td>   
                      @*   <td>
                            <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#couponModal-@transaction.TransactionID">
                                Coupons Type
                            </button>
                            <!-- Modal for Coupon Details -->
                            <div class="modal fade" id="couponModal-@transaction.TransactionID" tabindex="-1" aria-labelledby="couponModalLabel-@transaction.TransactionID" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="couponModalLabel-@transaction.TransactionID">Coupon Details</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <table class="table table-bordered text-center">
                                                <thead>
                                                    <tr>
                                                        <th>Coupon Type</th>
                                                        <th>Coupon Sort</th>
                                                        <th>Sequence Number</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td>@transaction.CouponType</td>
                                                        <td>@transaction.CouponSort</td>
                                                        <td>@transaction.SequenceStart - @transaction.SequenceEnd</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td> *@
                        <td>@transaction.Governate</td>
                        <td>@transaction.City</td>
                        <td>@transaction.CreatedBy</td>
                        <td>@transaction.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            <form asp-controller="HistoryGenerated" asp-action="GetAllCoupons" method="get" style="display:inline;">
                                <input type="hidden" name="fromSequence" value="@transaction.SequenceStart" />
                                <input type="hidden" name="toSequence" value="@transaction.SequenceEnd" />
                                <button type="submit" class="btn btn-primary">Details</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Container -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>


<script>
    document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase(); // Get search term
        const rows = document.querySelectorAll("#transactionsTable tbody tr");

        rows.forEach(row => {
            const cells = Array.from(row.children); // Get all cells in the row
            const isVisible = cells.some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none"; // Show/hide rows based on search
        });
    });
</script>

<style>
    .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
        color: #fff;
    }

        .btn-info:hover {
            background-color: #138496;
            border-color: #117a8b;
        }

    .modal-content {
        border-radius: 10px;
        transition: all 0.3s ease-in-out;
    }

    .modal-backdrop {
        backdrop-filter: blur(5px);
    }

    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
        margin-top: 20px;
    }

        .table th,
        .table td {
            text-align: center;
            vertical-align: middle;
            padding: 10px;
        }

    .thead-dark th {
        background-color: #007bff !important;
        color: #ffffff !important;
        font-weight: bold;
        text-transform: uppercase;
    }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    #searchBox {
        border-radius: 10px;
        padding: 10px;
        border: 2px solid #007bff;
        font-size: 16px;
    }

        #searchBox::placeholder {
            color: #aaa;
        }

    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        border-radius: 6px;
        margin: 2px;
    }

    #paginationContainer .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #paginationContainer .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        background-color: white;
    }

    #paginationContainer .btn:hover {
        opacity: 0.8;
    }
</style>

<script>
    // Pagination functionality
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; // Rows per page
        const tableBody = document.querySelector("#transactionsTable tbody");
        const paginationContainer = document.getElementById("paginationContainer");

        // Show specific page
        function showPage(pageNumber) {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });

            updatePaginationControls(pageNumber, totalPages);
        }

        // Update pagination controls
        function updatePaginationControls(currentPage, totalPages) {
            paginationContainer.innerHTML = "";
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                button.classList.add("btn", "btn-sm", "mx-1");
                button.classList.add(i === currentPage ? "btn-primary" : "btn-outline-primary");
                button.addEventListener("click", () => showPage(i));
                paginationContainer.appendChild(button);
            }
        }

        // Initialize pagination
        showPage(1);
    });
</script>