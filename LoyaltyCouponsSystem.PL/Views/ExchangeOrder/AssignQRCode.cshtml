@model AssignmentViewModel

@{
    ViewData["Title"] = "Assign QR Codes";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<br />
<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-5 text-primary"><b>Exchange Permission</b></h1>
        <p class="lead text-secondary">Assign QR Codes with a streamlined and modern interface.</p>
    </div>

    <form asp-action="AssignQRCode" method="post" id="assignForm" class="shadow-lg p-4 bg-white rounded">
        <div asp-validation-summary="All" class="text-danger mb-3"></div>

        <div class="row g-3">
            <div class="col-md-6">
                <label for="CustomerCodeOrName" class="form-label"><b>Select Customer</b></label>
                <select asp-for="SelectedCustomerCode" asp-items="Model.Customers" class="form-control select2" required>
                    <option value="" disabled selected>Select Customer</option>
                    @foreach (var customer in Model.Customers)
                    {
                        <option value="@customer.Value">@customer.Text</option>
                    }
                </select>
            </div>

            <div class="col-md-6">
                <label for="TechnicianCodeOrName" class="form-label"><b>Select Technician</b></label>
                <select asp-for="SelectedTechnicianCode" asp-items="Model.Technicians" class="form-control select2" required>
                    <option value="" disabled selected>Select Technician</option>
                    @foreach (var technician in Model.Technicians)
                    {
                        <option value="@technician.Value">@technician.Text</option>
                    }
                </select>
            </div>
        </div>
        <div class="row g-3 mt-3">
            <div class="col-md-6">
                <label for="Governate" class="form-label"><b>Select Governate</b></label>
                <select asp-for="SelectedGovernate" class="form-select" id="Governate" required>
                    <option value="">Select Governate</option>
                    @foreach (var governate in Model.Governates)
                    {
                        <option value="@governate.Value">@governate.Text</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label for="City" class="form-label"><b>Select City</b></label>
                <select asp-for="SelectedCity" class="form-select" id="City" required>
                    <option value="">Select City</option>
                </select>
            </div>
        </div>

        <div class="row g-3 mt-3">
            <div class="col-md-6">
                <label for="ExchangePermission" class="form-label"><b>Exchange Permission Number</b></label>
                <input asp-for="ExchangePermission" name="Transactions[0].ExchangePermission" class="form-control" placeholder="Enter exchange permission number" required />
                <span id="exchangePermissionError" class="text-danger" style="display: none;"></span>
            </div>
        </div>

        <div id="couponFieldsContainer" class="mt-4">
            <div class="row g-3 align-items-center couponFields">
                <div class="col-md-3">
                    <label for="CouponSort" class="form-label"><b>Coupon Sort</b></label>
                    <select name="Transactions[0].SelectedCouponSort" class="form-select" required>
                        <option value="">Select Coupon Sort</option>
                        @foreach (var sort in Model.CouponSorts)
                        {
                            <option value="@sort.Value">@sort.Text</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="CouponType" class="form-label"><b>Coupon Type</b></label>
                    <select name="Transactions[0].SelectedCouponType" class="form-select" required>
                        <option value="">Select Coupon Type</option>
                        @foreach (var type in Model.CouponTypes)
                        {
                            <option value="@type.Value">@type.Text</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="StartSequenceNumber" class="form-label"><b>Start Sequence Number</b></label>
                    <input type="number" name="Transactions[0].StartSequenceNumber" class="form-control" placeholder="Enter start sequence number" required />
                </div>
                <div class="col-md-3">
                    <label for="EndSequenceNumber" class="form-label"><b>End Sequence Number</b></label>
                    <input type="number" name="Transactions[0].EndSequenceNumber" class="form-control" placeholder="Enter end sequence number" required />
                </div>
                <div class="col-md-1 d-flex align-items-end">
                    <button type="button" class="btn btn-danger removeFieldsButton">Remove</button>
                </div>
            </div>
        </div>

        <div class="text-center mt-3">
            <button type="button" class="btn btn-outline-secondary" id="addFieldsButton">Add Another</button>
        </div>

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-custom">
                <i class="fas fa-paper-plane"></i> Assign
            </button>
        </div>
    </form>
</div>




<br />
<br />


@section Scripts {
    <script>
        //Validate on start and end of the sequence number is unique
                document.getElementById("assignForm").addEventListener("submit", async function (event) {
            const sequenceFields = document.querySelectorAll(".couponFields"); // Select all sequence field groups
            let isValid = true;

            for (const field of sequenceFields) {
                const startInput = field.querySelector('[name$="StartSequenceNumber"]'); // Find the Start Sequence input
                const endInput = field.querySelector('[name$="EndSequenceNumber"]'); // Find the End Sequence input
                const startValue = parseInt(startInput.value, 10); // Parse Start Sequence value
                const endValue = parseInt(endInput.value, 10); // Parse End Sequence value

                // Check if error message already exists
                let errorMessage = field.querySelector(".sequence-error");
                if (!errorMessage) {
                    errorMessage = document.createElement("div"); // Create error message container if not exists
                    errorMessage.classList.add("sequence-error");
                    endInput.parentNode.appendChild(errorMessage); // Append the error message after the End Sequence input
                }

                // Validation: Ensure Start Sequence is strictly less than End Sequence
                if (startValue >= endValue) {
                    isValid = false;
                    errorMessage.textContent = "End Sequence Number must be strictly greater than Start Sequence Number.";
                    errorMessage.style.display = "block";

                    startInput.classList.add("is-invalid");
                    endInput.classList.add("is-invalid");
                } else {
                    // Perform AJAX call to check if sequence range has already been used
                    const response = await fetch("/ExchangeOrder/CheckSequenceAvailability", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ startSequence: startValue, endSequence: endValue }),
                    });

                    const data = await response.json();

                    if (!data.isAvailable) {
                        isValid = false;
                        errorMessage.textContent = "The sequence range is already used. Please choose a different range.";
                        errorMessage.style.display = "block";

                        startInput.classList.add("is-invalid");
                        endInput.classList.add("is-invalid");
                    } else {
                        // If no issues, clear errors
                        errorMessage.style.display = "none";
                        startInput.classList.remove("is-invalid");
                        endInput.classList.remove("is-invalid");
                    }
                }
            }

            if (!isValid) {
                event.preventDefault(); // Prevent form submission if validation fails
            }
        });



        //check validation for start and end number sequence
                                document.getElementById('assignForm').addEventListener('submit', function (event) {
            const sequenceFields = document.querySelectorAll('.couponFields'); // Select all sequence field groups
            let isValid = true;

            sequenceFields.forEach((field) => {
                const startInput = field.querySelector('[name$="StartSequenceNumber"]'); // Find the Start Sequence input
                const endInput = field.querySelector('[name$="EndSequenceNumber"]'); // Find the End Sequence input
                const startValue = parseInt(startInput.value, 10); // Parse Start Sequence value
                const endValue = parseInt(endInput.value, 10); // Parse End Sequence value

                // Check if error message already exists
                let errorMessage = field.querySelector('.sequence-error');
                if (!errorMessage) {
                    errorMessage = document.createElement('div'); // Create error message container if not exists
                    errorMessage.classList.add('sequence-error');
                    endInput.parentNode.appendChild(errorMessage); // Append the error message after the End Sequence input
                }

                // Validation: Ensure Start Sequence is strictly less than End Sequence
                if (startValue >= endValue) {
                    isValid = false;

                    errorMessage.textContent = 'End Sequence Number must be strictly greater than Start Sequence Number.'; // Set error message text
                    errorMessage.style.display = 'block'; // Show the error message

                    startInput.classList.add('is-invalid'); // Highlight Start Sequence input as invalid
                    endInput.classList.add('is-invalid'); // Highlight End Sequence input as invalid
                } else {
                    errorMessage.style.display = 'none'; // Hide error message if values are valid
                    startInput.classList.remove('is-invalid'); // Remove invalid class from Start Sequence input
                    endInput.classList.remove('is-invalid'); // Remove invalid class from End Sequence input
                }
            });

            if (!isValid) {
                event.preventDefault(); // Prevent form submission if validation fails
            }
        });






        let index = 1; // Initialize index for dynamic rows

        // Add new row
        document.getElementById("addFieldsButton").addEventListener("click", function () {
            const container = document.getElementById("couponFieldsContainer");
            const newFields = document.createElement("div");
            newFields.classList.add("row", "g-3", "align-items-center", "couponFields", "mt-2");
            newFields.innerHTML = `
                <div class="col-md-3">
                    <label for="CouponSort" class="form-label fw-bold">Coupon Sort</label>
                    <select name="Transactions[${index}].SelectedCouponSort" class="form-select" required>
                        <option value="">Select Coupon Sort</option>
        @foreach (var sort in Model.CouponSorts)
        {
                                <option value="@sort.Value">@sort.Text</option>
        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="CouponType" class="form-label fw-bold">Coupon Type</label>
                    <select name="Transactions[${index}].SelectedCouponType" class="form-select" required>
                        <option value="">Select Coupon Type</option>
        @foreach (var type in Model.CouponTypes)
        {
                                <option value="@type.Value">@type.Text</option>
        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="StartSequenceNumber" class="form-label fw-bold">Start Sequence Number</label>
                    <input type="number" name="Transactions[${index}].StartSequenceNumber" class="form-control" placeholder="Enter start sequence number" required />
                </div>
                <div class="col-md-3">
                    <label for="EndSequenceNumber" class="form-label fw-bold">End Sequence Number</label>
                    <input type="number" name="Transactions[${index}].EndSequenceNumber" class="form-control" placeholder="Enter end sequence number" required />
                </div>
                <div class="col-md-1 d-flex align-items-end">
                    <button type="button" class="btn btn-danger removeFieldsButton">Remove</button>
                </div>
            `;
            container.appendChild(newFields);

            index++;
        });

        // Remove row
        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("removeFieldsButton")) {
                const fieldGroup = event.target.closest(".couponFields");
                fieldGroup.remove();
            }
        });

        // Hide "Remove" button for the first row initially
        document.addEventListener("DOMContentLoaded", function () {
            const firstFieldGroup = document.querySelector(".couponFields");
            if (firstFieldGroup) {
                const firstRemoveButton = firstFieldGroup.querySelector(".removeFieldsButton");
                if (firstRemoveButton) {
                    firstRemoveButton.style.display = "none"; // Hide remove button for the first row
                }
            }
        });



        // Make the city dropdown dynamic based on selected governate
        document.getElementById("Governate").addEventListener("change", function () {
            var governate = this.value;
            var citySelect = document.getElementById("City");

            // Clear existing options
            citySelect.innerHTML = "<option value=''>Select City</option>";

            // Define static cities for demonstration
            var cities = {
                "Cairo": ["Nasr City", "City2"],
                "Gharbeia": ["Tanta", "Qotor"],
                "Sharqeia": ["City5", "City6"],
                "Alexandria": ["Smouha", "City8"]
            };

            // Populate city dropdown based on selected governate
            if (cities[governate]) {
                cities[governate].forEach(function (city) {
                    var option = document.createElement("option");
                    option.value = city;
                    option.text = city;
                    citySelect.appendChild(option);
                });
            }
        });



        // Function to validate and check that Exchange Permission Number is unique
                        document.getElementById('assignForm').addEventListener('submit', function (event) {
            const exchangePermissionInput = document.querySelector('[name="Transactions[0].ExchangePermission"]');
            const exchangePermissionError = document.getElementById('exchangePermissionError');
            const exchangePermission = exchangePermissionInput.value;

            $.ajax({
                url: '/ExchangeOrder/CheckExchangePermission', // Ensure this URL is correct
                type: 'POST',
                data: { exchangePermission },
                async: false,
                success: function (isDuplicate) {
                    if (isDuplicate) {
                        event.preventDefault();
                        // Show the error message in red below the field
                        exchangePermissionError.textContent = 'This Exchange Permission Number is already used.';
                        exchangePermissionError.style.display = 'block';
                        exchangePermissionInput.classList.add('is-invalid');
                        exchangePermissionInput.focus();
                    } else {
                        // Hide the error message if no duplicate is found
                        exchangePermissionError.style.display = 'none';
                        exchangePermissionInput.classList.remove('is-invalid');
                    }
                },
                error: function () {
                    event.preventDefault();
                    // Show a generic error message
                    exchangePermissionError.textContent = 'An error occurred while checking the Exchange Permission Number.';
                    exchangePermissionError.style.display = 'block';
                    exchangePermissionInput.classList.add('is-invalid');
                }
            });
        });


                    $(document).ready(function () {
            $('.select2').select2({
                placeholder: "Select an option", // Placeholder text
                allowClear: true,               // Allow clearing selected value
                width: '100%'                   // Ensure dropdown is responsive
            });
        });

    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/additional-methods.min.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>



    <!-- Include Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
}

<style>
    .form-label {
        color: #007bff !important;
        font-weight: bold;
    }

    .form-control, .form-select {
        border-radius: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: #0056b3;
            box-shadow: 0 0 10px rgba(0, 86, 179, 0.3);
        }


    label {
        font-weight: bold;
    }


    .btn-outline-secondary {
        border-radius: 30px;
        border: 2px solid #007bff;
        color: #007bff;
        padding: 8px 20px;
        transition: all 0.3s ease;
    }

        .btn-outline-secondary:hover {
            background-color: #007bff;
            color: white;
        }

    .btn-custom {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 8px 20px;
        background-color: #007bff;
        color: #fff;
        font-weight: bold;
        font-size: 14px;
        border: none;
        border-radius: 25px;
        box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #0056b3;
            color: #fff;
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 86, 179, 0.3);
        }

        .btn-custom:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

    .btn-danger {
        border-radius: 20px;
    }

    .couponFields {
        border-bottom: 1px dashed #e0e0e0;
        padding-bottom: 15px;
        margin-bottom: 10px;
    }

    .container h1 {
        font-size: 28px;
        font-weight: bold;
    }

    .is-invalid {
        border-color: #dc3545; /* Red border */
        box-shadow: 0 0 5px rgba(220, 53, 69, 0.5); /* Optional red shadow */
    }

    .text-danger {
        font-size: 0.875em; /* Adjust font size if needed */
        margin-top: 5px;
    }

    .select2-container .select2-selection--single {
        height: 38px; /* Adjust height to match `form-select` */
        border-radius: 8px;
        border: 1px solid #ced4da; /* Match other field borders */
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 38px;
        color: #495057;
        padding-left: 8px; /* Align with other fields */
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 38px;
    }

    hr {
        border-top: 2px solid #808080;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .sequence-error {
        margin-top: 5px; 
        font-size: 0.875em; 
        color: #dc3545;
        position: relative; 
    }


    
</style>