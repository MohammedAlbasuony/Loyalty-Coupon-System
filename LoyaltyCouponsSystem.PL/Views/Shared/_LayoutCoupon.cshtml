@using LoyaltyCouponsSystem.BLL.Service.Abstraction


<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport" />

    <!-- Bootstrap and Table -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.21.0/dist/bootstrap-table.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.21.0/dist/bootstrap-table.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Fonts and icons -->
    <script src="~/assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
        WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
        families: ["Font Awesome 5 Solid", "Font Awesome 5 Regular", "Font Awesome 5 Brands", "simple-line-icons"],
        urls: ["~/assets/css/fonts.min.css"],
        },
        active: function () {
        sessionStorage.fonts = true;
        },
        });
    </script>



    <!-- CSS Files -->
    <link rel="stylesheet" href="~/assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/assets/css/plugins.min.css" />
    <link rel="stylesheet" href="~/assets/css/kaiadmin.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>

        .sidebar {
            transition: all 0.3s ease;
            width: 250px;
            overflow: hidden;
        }

            .sidebar.collapsed {
                width: 70px;
            }

            .sidebar .nav-item {
                text-align: left;
                transition: all 0.3s ease;
            }

                .sidebar .nav-item .btn,
                .sidebar .nav-item a {
                    padding: 10px 15px;
                    display: flex;
                    align-items: center;
                    transition: all 0.3s ease;
                }

                    .sidebar .nav-item .btn i,
                    .sidebar .nav-item a i {
                        margin-right: 10px;
                    }

            .sidebar.collapsed .nav-item .btn span,
            .sidebar.collapsed .nav-item a span {
                display: none;
            }

            /* Log Out Button Specific Styling */
            .sidebar.collapsed .logout-btn {
                justify-content: center;
                padding: 10px;
                text-align: center;
            }

            /* Sidebar expands temporarily on hover */
            .sidebar:hover:not(.static) {
                width: 250px;
            }

                .sidebar:hover:not(.static) .nav-item .btn span,
                .sidebar:hover:not(.static) .nav-item a span {
                    display: inline-block;
                }

            /* Static state for the sidebar */
            .sidebar.static {
                width: 250px;
            }

        /* Collapse Button */
        #collapseSidebar {
            background: none;
            border: none;
            font-size: 20px;
            margin: 10px;
            color: white;
            cursor: pointer;
        }

            #collapseSidebar:hover {
                opacity: 0.8;
            }

        /* Log Out Button */
        .logout-btn {
            background: linear-gradient(90deg, #ff4d4d, #ff3333);
            border: none;
            border-radius: 25px;
            font-weight: bold;
            color: white;
            padding: 10px 20px;
            font-size: 16px;
            transition: all 0.3s ease;
            width: 90%;
            margin: 10px auto;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .logout-btn i {
                font-size: 20px;
            }

            .logout-btn:hover {
                background: linear-gradient(90deg, #ff6666, #ff4d4d);
                box-shadow: 0 4px 15px rgba(255, 77, 77, 0.5);
                transform: scale(1.05);
            }
    </style>


</head>
@inject IAdminService _adminService

<body>
    <div class="wrapper">
        <!-- Sidebar -->
        <div class="sidebar" data-background-color="dark">
            <div class="sidebar-logo">
                <!-- Collapse Button -->
                <div class="logo-header" data-background-color="dark">
                    <div class="nav-toggle">
                        <button class="btn btn-toggle toggle-sidebar" id="collapseSidebar">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="sidebar-wrapper scrollbar scrollbar-inner">
                <div class="sidebar-content">
                    <ul class="nav nav-secondary">
                        <!-- Home -->
                        @* <li class="nav-item"> *@
                        @*     <a href="@Url.Action("Dashboard", "Admin")"> *@
                        @*         <i class="fas fa-tachometer-alt"></i> *@
                        @*         <span>Home</span> *@
                        @*     </a> *@
                        @* </li> *@

                        <!-- QR Codes -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Generate QR Codes"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#qrCodes" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-qrcode"></i>
                                    <span>QR Codes</span>
                                    <span class="caret"></span>
                                </a>
                                <div class="collapse" id="qrCodes">
                                    <ul class="nav nav-collapse">
                                        <li>
                                            <a href="@Url.Action("DetailsOfCoupones", "GenerateQRCode")">
                                                <span class="sub-item">Generate QRs</span>
                                            </a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("GetAllCoupons", "HistoryGenerated")">
                                                <span class="sub-item">All Generated QRs</span>
                                            </a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("TransactionHistory", "HistoryGenerated")">
                                                <span class="sub-item">Transaction Generated QRs</span>
                                            </a>
                                        </li>
                                        <li>

                                              <span class="sub-item">ScanQR</span>
                                            <a href="@Url.Action("Index", "QrCode")">

                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </li>

                        }



                       

                        <!-- Exchange Permission -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Exchange Permissions"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#exchangePermission" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-exchange-alt"></i>
                                    <span>Exchange Permission</span>
                                    <span class="caret"></span>
                                </a>
                                <div class="collapse" id="exchangePermission">
                                    <ul class="nav nav-collapse">

                                        <li>
                                            <a href="@Url.Action("AssignQRCode", "ExchangeOrder")">
                                                <span class="sub-item">Generate an Exchange Permission</span>
                                            </a>
                                        </li>

                                        <li>
                                            <a href="@Url.Action("AllTransactions", "Transaction")">
                                                <span class="sub-item">Exchange All Transactions</span>
                                            </a>
                                        </li>

                                    </ul>
                                </div>
                            </li>
                        }

                       

                        <!-- Deliver From Represititve to Coustomer -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Deliver From Representative to Customer"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#DiliverFromRepToCoust" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-exchange-alt"></i>
                                    <span> Merchant receipt from the representative.</span>
                                    <span class="caret"></span>
                                </a>
                                <div class="collapse" id="DiliverFromRepToCoust">
                                    <ul class="nav nav-collapse">
                                        <li>
                                            <a href="@Url.Action("Index", "DilverFromRepToCoust")">
                                                <span class="sub-item">Merchant receipt from the representative.</span>
                                            </a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("Transaction", "DilverFromRepToCoust")">
                                                <span class="sub-item"> All Transactions</span>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        }

                        @* <!-- Deliver From Representative to Customer --> *@
                        @* @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Deliver From Representative to Customer")) *@
                        @* { *@
                        @*     <li class="nav-item"> *@
                        @*         <a data-bs-toggle="collapse" href="#DiliverFromRepToCoust" aria-expanded="false" class="collapsed"> *@
                        @*             <i class="fas fa-exchange-alt"></i> *@
                        @*             <span>Deliver Representative to Customer</span> *@
                        @*             <span class="caret"></span> *@
                        @*         </a> *@
                        @*         <div class="collapse" id="DiliverFromRepToCoust"> *@
                        @*             <ul class="nav nav-collapse"> *@

                        @*                     <li> *@
                        @*                         <a href="@Url.Action("Index", "DilverFromRepToCoust")"> *@
                        @*                             <span class="sub-item">Generate an Exchange Permission</span> *@
                        @*                         </a> *@
                        @*                     </li> *@

                        @*             </ul> *@
                        @*         </div> *@
                        @*     </li> *@
                        @* } *@



                        <!-- Receive From Customer -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Receive From Customer"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#receiveFromCustomer" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-exchange-alt"></i>
                                    <span>Receive from Customer</span>
                                    <span class="caret"></span>
                                </a>
                                <div class="collapse" id="receiveFromCustomer">
                                    <ul class="nav nav-collapse">
                                        <li>
                                            <a href="@Url.Action("ReturnItems", "ReceiveFromCustomer")">
                                                <span class="sub-item">Return Items</span>
                                            </a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("AllTransactions", "ReceiveFromCustomer")">
                                                <span class="sub-item">All Transactions</span>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        }



                        <!-- Approve Recieved Coupons -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Approve Recieved Coupons"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#Approve Recieved Coupons" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-exchange-alt"></i>
                                    <span>Approve Recieved Coupons</span>
                                    <span class="caret"></span>
                                </a>

                            </li>
                        }


                        <!-- Manage Users -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Manage Customers"))
                        {
                            <li class="nav-item">
                                <a data-bs-toggle="collapse" href="#manageUsers" aria-expanded="false" class="collapsed">
                                    <i class="fas fa-users"></i>
                                    <span>Manage Customers</span>
                                    <span class="caret"></span>
                                </a>
                                <div class="collapse" id="manageUsers">
                                    <ul class="nav nav-collapse">

                                        <li>
                                            <a href="@Url.Action("GetAllCustomers", "Customer")">
                                                <span class="sub-item">Manage Merchant</span>
                                            </a>
                                        </li>


                                        <li>
                                            <a href="@Url.Action("GetAllDistributors", "Distributor")">
                                                <span class="sub-item">Manage Distributor</span>
                                            </a>
                                        </li>

                                        <li>
                                            <a href="@Url.Action("GetAllTechnicians", "Technician")">
                                                <span class="sub-item">Manage Technician</span>
                                            </a>
                                        </li>

                                    </ul>
                                </div>
                            </li>
                        }


                        <!-- Manage Representatives -->
                        @if (await _adminService.UserHasPermissionAsync(User.Identity.Name, "Manage Users"))
                        {
                            <li class="nav-item">
                                <a href="@Url.Action("ManageUsers", "Admin")">
                                    <i class="fas fa-user-tie"></i>
                                    <span>Manage Users</span>
                                </a>
                            </li>
                        }

                        <!-- Log Out -->
                        <li class="nav-item mt-auto">
                            <button id="logout-btn" class="btn logout-btn">
                                <i class="fas fa-sign-out-alt"></i>
                                <span>Log Out</span>
                            </button>
                        </li>

                    </ul>
                </div>
            </div>
        </div>
        <!-- End Sidebar -->

        <div class="main-panel" style="padding-left: 10px;">
            @RenderBody()
        </div>
    </div>

    <!-- Core JS Files -->
    <script src="~/assets/js/core/jquery-3.7.1.min.js"></script>
    <script src="~/assets/js/core/popper.min.js"></script>
    <script src="~/assets/js/core/bootstrap.min.js"></script>


    <!-- For Validation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.13/dist/jquery.validate.unobtrusive.min.js"></script>


    <!-- Sidebar Toggle Script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        const sidebar = document.querySelector(".sidebar");
        const collapseButton = document.getElementById("collapseSidebar");
        let isStatic = true;

        // Toggle sidebar collapse and static states
        collapseButton.addEventListener("click", function () {
            if (sidebar.classList.contains("collapsed")) {
                sidebar.classList.remove("collapsed");
                sidebar.classList.add("static");
                isStatic = true;
            } else if (isStatic) {
                sidebar.classList.remove("static");
                sidebar.classList.add("collapsed");
                isStatic = false;
            } else {
                sidebar.classList.add("collapsed");
            }
        });

        // Expand sidebar temporarily on hover when collapsed
        sidebar.addEventListener("mouseenter", function () {
            if (!isStatic && sidebar.classList.contains("collapsed")) {
                sidebar.classList.remove("collapsed");
            }
        });

        // Collapse sidebar when mouse leaves, unless static
        sidebar.addEventListener("mouseleave", function () {
            if (!isStatic && !sidebar.classList.contains("static")) {
                sidebar.classList.add("collapsed");
            }
        });

        // Handle submenu toggling
        const toggles = document.querySelectorAll('.nav-item a[data-bs-toggle="collapse"]');
        toggles.forEach(toggle => {
            toggle.addEventListener("click", function (event) {
                const target = document.querySelector(this.getAttribute("href"));
                if (target) {
                    event.preventDefault();
                    const isCollapsed = target.classList.contains("show");
                    document.querySelectorAll(".collapse").forEach(el => el.classList.remove("show"));
                    if (!isCollapsed) {
                        target.classList.add("show");
                    }
                }
            });
        });

            // Logout button logic with confirmation
        document.getElementById("logout-btn").addEventListener("click", function () {
            Swal.fire({
                title: "Are you sure?",
                text: "You will be logged out of your session.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, log me out!",
                cancelButtonText: "Cancel",
            }).then((result) => {
                if (result.isConfirmed) {
                    // Submit logout form
                    const logoutForm = document.createElement("form");
                    logoutForm.method = "POST";
                    logoutForm.action = "/Account/Logout";
                    document.body.appendChild(logoutForm);
                    logoutForm.submit();
                }
            });
        });
        });
    </script>

    @RenderSection("script", required: false)
    @RenderSection("Scripts", required: false)
</body>
</html>